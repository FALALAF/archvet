@page "/login"
@rendermode InteractiveServer
@using BlazorApp1.Services
@inject AuthService AuthService
@inject AuthStateService AuthState
@inject NavigationManager Navigation

<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h3>Logowanie</h3>
                </div>
                <div class="card-body">
                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="alert alert-danger">@errorMessage</div>
                    }

                    <EditForm Model="@loginModel" OnValidSubmit="HandleLogin" FormName="loginForm">
                        <DataAnnotationsValidator />

                        <div class="mb-3">
                            <label class="form-label">Email:</label>
                            <InputText @bind-Value="loginModel.Email" class="form-control" />
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Hasło:</label>
                            <InputText @bind-Value="loginModel.Password" type="password" class="form-control" />
                        </div>

                        <button type="submit" class="btn btn-primary w-100" disabled="@isLoading">
                            @if (isLoading)
                            {
                                <span>Logowanie...</span>
                            }
                            else
                            {
                                <span>Zaloguj</span>
                            }
                        </button>
                    </EditForm>

                    <hr />
                    <p class="text-center">
                        Nie masz konta? <a href="/register">Zarejestruj się</a>
                    </p>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private LoginModel loginModel = new();
    private string? errorMessage;
    private bool isLoading;

    private async Task HandleLogin()
    {
        isLoading = true;
        errorMessage = null;

        var result = await AuthService.LoginAsync(loginModel.Email, loginModel.Password);

        if (result.Success && result.Token != null)
        {
            await AuthState.SetAuthenticationAsync(result.Token);  // ASYNC!
            Navigation.NavigateTo("/");
        }
        else
        {
            errorMessage = result.Message;
        }

        isLoading = false;
    }

    public class LoginModel
    {
        public string Email { get; set; } = "";
        public string Password { get; set; } = "";
    }
}